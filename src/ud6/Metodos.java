// List<E> methods:
    // boolean add(E e)
    // void add(int index, E element)
    // boolean addAll(Collection<? extends E> c)
    // boolean addAll(int index, Collection<? extends E> c)
    // boolean remove(Object o)
    // E remove(int index)
    // boolean removeAll(Collection<?> c)
    // boolean retainAll(Collection<?> c)
    // void clear()
    // E get(int index)
    // E set(int index, E element)
    // int indexOf(Object o)
    // int lastIndexOf(Object o)
    // boolean contains(Object o)
    // boolean containsAll(Collection<?> c)
    // Iterator<E> iterator()
    // List<E> subList(int fromIndex, int toIndex)
    // int size()
    // boolean isEmpty()
    // Object[] toArray()
    // <T> T[] toArray(T[] a)

// Set<E> methods:
    // boolean add(E e)
    // boolean addAll(Collection<? extends E> c)
    // boolean remove(Object o)
    // boolean removeAll(Collection<?> c)
    // boolean retainAll(Collection<?> c)
    // void clear()
    // boolean contains(Object o)
    // boolean containsAll(Collection<?> c)
    // Iterator<E> iterator()
    // Spliterator<E> spliterator()
    // int size()
    // boolean isEmpty()
    // Object[] toArray()
    // <T> T[] toArray(T[] a)

// Map<K,V> methods:
    // V put(K key, V value)
    // void putAll(Map<? extends K,? extends V> m)
    // V remove(Object key)
    // void clear()
    // boolean containsKey(Object key)
    // boolean containsValue(Object value)
    // V get(Object key)
    // V getOrDefault(Object key, V defaultValue)
    // Set<K> keySet()
    // Collection<V> values()
    // Set<Map.Entry<K,V>> entrySet()
    // V putIfAbsent(K key, V value)
    // boolean remove(Object key, Object value)
    // boolean replace(K key, V oldValue, V newValue)
    // V replace(K key, V value)
    // V merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)

// Collections (utility) methods:
    // <T extends Comparable<? super T>> void sort(List<T> list)
    // <T> void sort(List<T> list, Comparator<? super T> c)
    // <T extends Comparable<? super T>> int binarySearch(List<? extends T> list, T key)
    // <T> int binarySearch(List<? extends T> list, T key, Comparator<? super T> c)
    // void reverse(List<?> list)
    // void shuffle(List<?> list)
    // <T> void shuffle(List<T> list, Random rnd)
    // <T> void rotate(List<T> list, int distance)
    // void swap(List<?> list, int i, int j)
    // <T> void fill(List<? super T> list, T obj)
    // <T> void copy(List<? super T> dest, List<? extends T> src)
    // <T> T max(Collection<? extends T> coll)
    // <T> T max(Collection<? extends T> coll, Comparator<? super T> c)
    // <T> T min(Collection<? extends T> coll)
    // <T> T min(Collection<? extends T> coll, Comparator<? super T> c)
    // <T> int frequency(Collection<?> c, Object o)
    // boolean disjoint(Collection<?> c1, Collection<?> c2)
    // <E> Enumeration<E> enumeration(Collection<E> c)
    // <T> List<T> list(Enumeration<T> e)
    // <T> Comparator<T> reverseOrder()
    // <T extends Comparable<? super T>> Comparator<T> naturalOrder()
    // <T> Comparator<T> nullsFirst(Comparator<? super T> comparator)
    // <T> Comparator<T> nullsLast(Comparator<? super T> comparator)
    // <T> boolean addAll(List<? super T> list, T... elements)
